#!/usr/bin/ruby

require 'getoptlong'
require 'fileutils'

apache_install = false
apache_path = './'
domain = "wopr.local"
database = {}
database_install = false
environment = "production"
gems_install = false
path = "./"

def printusage(error_code)
	print "\nW.O.P.R. (Wireless Operations Point-of-sale Response) Installer\n"
	print "Usage: ./install [options] \n"
	print "Options:\n"
	print "-a, --apache      Install virtual host to given Apache virtual host path. Ex: -a /path/to/apache/virtual/hosts"
	print "-d, --database    Database configuration. Ex: -d host=localhost,username=user,password=pass\n"
	print "-o, --domain      Domain name for system. Ex: -o example.com\n"
	print "-e, --environment Environment. Options: (production|development) Ex: -e production\n"
	print "-g, --gems        Install Ruby Gems.\n"
	print "-h, --help        Help.\n"
	print "-u, --usage       Usage.\n"
	exit(error_code)
end

opts = GetoptLong.new(
	[ "--apache",	   "-a",   GetoptLong::REQUIRED_ARGUMENT ],
	[ "--database",    "-d",   GetoptLong::REQUIRED_ARGUMENT ],
	[ "--domain", 	   "-o",   GetoptLong::REQUIRED_ARGUMENT ],
	[ "--environment", "-e",   GetoptLong::REQUIRED_ARGUMENT ],
	[ "--gems",		   "-g",   GetoptLong::NO_ARGUMENT ],
	[ "--help",		   "-h",   GetoptLong::NO_ARGUMENT ],
	[ "--usage",	   "-u",   GetoptLong::NO_ARGUMENT ]
)

begin
	opts.each do |opt, arg|
		case opt
			when "--apache"
				apache_path = arg
				apache_install = true
			when "--database"
				arg.split(',').each do |darg|
					darg_parts = darg.split('=')
					if(darg_parts[0] == 'host' || darg_parts[0] == 'username' || darg_parts[0] == 'password')
						database[darg_parts[0]] = darg_parts[1]
					else
						puts "Error: Syntax incorrect for database configuration.\n"
						printusage(1)
					end
				end
				database_install = true
			when "--domain"
				domain = arg
			when "--environment"
				if(arg == 'production' || arg == 'development')
					environment = arg
				else
					puts "Error: Environment must be either 'production' or 'development'"
					printusage(1)
				end
			when "--gems"
				gems_install = true
			when "--help"
				printusage(0)
			when "--usage"
				printusage(0)
		end
	end
	
	puts "\n"
	
	# Find base file path
	puts "Determining installation base path..."
	path = File.expand_path(File.join(File.expand_path(File.dirname(__FILE__)), '../'))
	puts "Success!"
	
	# Chmod file paths
	puts "CHMODing base path..."
	if system('chmod -R 0777 ' + path + '/')
		puts "Success!"
	else
		puts "Failed!"
	end
	
	# Install Ruby gems
	if(gems_install)
		puts "Installing Ruby Gems..."
		if File.exists?(File.join(path, 'install/gems/manifest'))
			file = File.open(File.join(path, 'install/gems/manifest'), "r")
			file.each do |line|
				system('gem install ' + line.gsub!(/[\n]+/, ''))
			end
			puts "Success!"
		else
			puts "Failed!"
			puts "Error: Could not locate gems manifest."
			printusage(1)
		end
	end
	
	# Create and install Apache virtual host
	puts "Creating Apache virtual host file..."
	if File.exists?(File.join(path, 'install/templates/virtual_hosts.tpl'))
		
		if !File.directory?(File.join(path, 'install/temp'))
			FileUtils.mkdir(File.join(path, 'install/temp'))
		end
		
		virtual_host_template = File.open(File.join(path, 'install/templates/virtual_hosts.tpl'), "r").read
		virtual_host_template = virtual_host_template.gsub!(/@:domain@/, domain).gsub!(/@:path@/, path)
		virtual_host_file = File.new(File.join(path, 'install/temp/wopr.conf'), "w")
		
		if virtual_host_file.write(virtual_host_template) > 0
			
			puts "Success!"
			
			if(apache_install)
				puts "Installing Apache virtual host file..."
				apache_virtual_host_file = File.new(File.join(apache_path, 'wopr.conf'), "w")
				if apache_virtual_host_file.write(virtual_host_template) > 0
					puts "Success!"
				else
					puts "Failed!"
					puts "Error: Could not create virtual host file in given Apache virtual host location."
					printusage(1)
				end
			end
			
		else
			puts "Failed!"
			puts "Error: Could not write data to virtual host file."
			printusage(1)
		end
		
	else
		puts "Failed!"
		puts "Error: Could not locate virtual host template."
		printusage(1)
	end

	# Create and install database configuration file in database app folder
	if(database_install)
		puts "Creating PHP configuration file for MySQL..."
		if File.exists?(File.join(path, 'install/templates/database.tpl'))
		
			if !File.directory?(File.join(path, 'database/inc'))
				FileUtils.mkdir(File.join(path, 'database/inc'))
			end
		
			database_template = File.open(File.join(path, 'install/templates/database.tpl'), "r").read
			database_template = database_template.gsub!(/@:host@/, database['host']).gsub!(/@:username@/, database['username']).gsub!(/@:password@/, database['password'])
			database_file = File.new(File.join(path, 'database/inc/database.php'), "w")
		
			if database_file.write(database_template) > 0
				puts "Success!"
			else
				puts "Failed!"
				puts "Error: Could not write data to database file."
				printusage(1)
			end
		
		else
			puts "Failed!"
			puts "Error: Could not locate database template."
			printusage(1)
		end
	end
	
	# Instruct user to install domain to /etc/hosts
	# Instruct user to install virtual host file
	# Instruct user to restart Apache
	puts "Installation Complete!\n\n"
	puts "To finish the installation do the following:"
	puts "  -- Install #{domain} to /etc/hosts file."
	if(!apache_install)
		puts "  -- Install Apache virtual host file to your Apache virtual host location."
		puts "    $ cp -f #{path}/install/temp/wopr.conf /path/to/your/virtual/hosts/"
	end
	puts "  -- Install database using SQL from #{path}/install/sql/database.sql" 
	puts "    $ mysql --user=username --password=password < #{path}/install/sql/database.sql"
	puts "  -- Restart Apache\n\n"
	
rescue
	printusage(1)
end